# Script para Verificar Azure Event Hub
# Executa: .\verificar-eventhub.ps1

Write-Host "üîç VERIFICA√á√ÉO DO AZURE EVENT HUB" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan
Write-Host ""

# 1. Verificar se a aplica√ß√£o est√° rodando
Write-Host "1Ô∏è‚É£ Verificando se a aplica√ß√£o est√° ativa..." -ForegroundColor Yellow
try {
    $healthCheck = Invoke-RestMethod -Uri "http://localhost:8080/actuator/health" -Method Get -TimeoutSec 5
    if ($healthCheck.status -eq "UP") {
        Write-Host "‚úÖ Aplica√ß√£o est√° rodando" -ForegroundColor Green
    }
    else {
        Write-Host "‚ùå Aplica√ß√£o n√£o est√° saud√°vel: $($healthCheck.status)" -ForegroundColor Red
        exit 1
    }
}
catch {
    Write-Host "‚ùå Aplica√ß√£o n√£o est√° respondendo na porta 8080" -ForegroundColor Red
    Write-Host "   Execute: mvn spring-boot:run" -ForegroundColor Yellow
    exit 1
}

Write-Host ""

# 2. Verificar configura√ß√£o do EventHub
Write-Host "2Ô∏è‚É£ Verificando configura√ß√£o do EventHub..." -ForegroundColor Yellow

# Ler vari√°veis do .env
if (Test-Path ".env") {
    Get-Content ".env" | ForEach-Object {
        if ($_ -match "AZURE_EVENTHUB_(.+)=(.+)") {
            $key = $matches[1]
            $value = $matches[2]
            Write-Host "   $key = $value" -ForegroundColor Gray
        }
    }
    Write-Host "‚úÖ Arquivo .env encontrado" -ForegroundColor Green
}
else {
    Write-Host "‚ùå Arquivo .env n√£o encontrado" -ForegroundColor Red
    exit 1
}

Write-Host ""

# 3. Fazer uma simula√ß√£o para testar o envio
Write-Host "3Ô∏è‚É£ Testando envio para EventHub via simula√ß√£o..." -ForegroundColor Yellow

$simulacaoBody = @{
    valorDesejado = 5000.00
    prazo         = 12
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "http://localhost:8080/simulacoes" -Method Post -Body $simulacaoBody -ContentType "application/json" -TimeoutSec 30
    Write-Host "‚úÖ Simula√ß√£o criada com sucesso!" -ForegroundColor Green
    Write-Host "   ID da Simula√ß√£o: $($response.id)" -ForegroundColor Gray
    Write-Host "   Produto: $($response.codigoProduto) - $($response.descricaoProduto)" -ForegroundColor Gray
    
    # Aguardar um pouco para o EventHub processar
    Write-Host "‚è≥ Aguardando processamento..." -ForegroundColor Yellow
    Start-Sleep -Seconds 3
    
}
catch {
    Write-Host "‚ùå Erro ao criar simula√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   Verifique os logs da aplica√ß√£o" -ForegroundColor Yellow
}

Write-Host ""

# 4. Verificar logs da aplica√ß√£o para EventHub
Write-Host "4Ô∏è‚É£ Verificando logs recentes..." -ForegroundColor Yellow
Write-Host "   (Procure por mensagens de EventHub nos logs da aplica√ß√£o)" -ForegroundColor Gray
Write-Host "   Mensagens esperadas:" -ForegroundColor Gray
Write-Host "   - 'Simula√ß√£o conclu√≠da com sucesso'" -ForegroundColor Gray
Write-Host "   - Ou 'Erro ao enviar mensagem para EventHub'" -ForegroundColor Gray

Write-Host ""

# 5. Verificar m√∫ltiplas simula√ß√µes
Write-Host "5Ô∏è‚É£ Enviando m√∫ltiplas simula√ß√µes para teste..." -ForegroundColor Yellow

$simulacoes = @(
    @{ valorDesejado = 10000; prazo = 24 },
    @{ valorDesejado = 15000; prazo = 36 },
    @{ valorDesejado = 8000; prazo = 18 }
)

$sucessos = 0
$erros = 0

foreach ($sim in $simulacoes) {
    try {
        $body = $sim | ConvertTo-Json
        $response = Invoke-RestMethod -Uri "http://localhost:8080/simulacoes" -Method Post -Body $body -ContentType "application/json" -TimeoutSec 15
        $sucessos++
        Write-Host "   ‚úÖ Simula√ß√£o R$ $($sim.valorDesejado) em $($sim.prazo)x - ID: $($response.id)" -ForegroundColor Green
    }
    catch {
        $erros++
        Write-Host "   ‚ùå Falha na simula√ß√£o R$ $($sim.valorDesejado) em $($sim.prazo)x" -ForegroundColor Red
    }
    Start-Sleep -Seconds 1
}

Write-Host ""
Write-Host "üìä RESULTADO DOS TESTES:" -ForegroundColor Cyan
Write-Host "   Simula√ß√µes enviadas com sucesso: $sucessos" -ForegroundColor Green
Write-Host "   Simula√ß√µes com erro: $erros" -ForegroundColor Red

if ($sucessos -gt 0) {
    Write-Host ""
    Write-Host "üéâ PR√ìXIMOS PASSOS PARA VERIFICAR EVENTHUB:" -ForegroundColor Cyan
    Write-Host "1. Acesse o Portal Azure (portal.azure.com)" -ForegroundColor Yellow
    Write-Host "2. V√° para o Event Hub 'eventhack'" -ForegroundColor Yellow
    Write-Host "3. Clique em 'Event Hubs' > 'simulacoes'" -ForegroundColor Yellow
    Write-Host "4. Verifique as m√©tricas:" -ForegroundColor Yellow
    Write-Host "   - Incoming Messages" -ForegroundColor Gray
    Write-Host "   - Outgoing Messages" -ForegroundColor Gray
    Write-Host "   - Incoming Requests" -ForegroundColor Gray
    Write-Host ""
    Write-Host "üìà Ou use a telemetria da aplica√ß√£o:" -ForegroundColor Cyan
    Write-Host "   GET http://localhost:8080/monitoramento/telemetria" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üîß TROUBLESHOOTING:" -ForegroundColor Cyan
Write-Host "- Se n√£o apareceram mensagens no EventHub:" -ForegroundColor Yellow
Write-Host "  1. Verifique as credenciais no .env" -ForegroundColor Gray
Write-Host "  2. Confirme se o EventHub 'simulacoes' existe" -ForegroundColor Gray
Write-Host "  3. Verifique as permiss√µes da chave de acesso" -ForegroundColor Gray
Write-Host "  4. Analise os logs da aplica√ß√£o Spring Boot" -ForegroundColor Gray

Write-Host ""
Write-Host "‚úÖ Verifica√ß√£o conclu√≠da!" -ForegroundColor Green

#!/usr/bin/env pwsh
# Script para gerenciar a aplica√ß√£o Docker - Hackathon 2025
# API Simulador de Empr√©stimos

param(
    [Parameter(Mandatory)]
    [ValidateSet("build", "start", "stop", "restart", "logs", "clean", "status", "test")]
    [string]$Action
)

$ErrorActionPreference = "Stop"
$ContainerName = "api-simulador-hackathon"
$ComposeFile = "docker-compose.yml"

function Show-Header {
    Write-Host "=============================================" -ForegroundColor Cyan
    Write-Host "üè¶ API Simulador - Hackathon 2025" -ForegroundColor Green
    Write-Host "=============================================" -ForegroundColor Cyan
    Write-Host ""
}

function Test-Prerequisites {
    Write-Host "üîç Verificando pr√©-requisitos..." -ForegroundColor Yellow
    
    if (!(Get-Command docker -ErrorAction SilentlyContinue)) {
        throw "‚ùå Docker n√£o encontrado. Instale o Docker Desktop."
    }
    
    if (!(Get-Command docker-compose -ErrorAction SilentlyContinue)) {
        throw "‚ùå Docker Compose n√£o encontrado."
    }
    
    if (!(Test-Path .env)) {
        throw "‚ùå Arquivo .env n√£o encontrado. Copie de .env.example"
    }
    
    Write-Host "‚úÖ Pr√©-requisitos OK" -ForegroundColor Green
}

function Build-Application {
    Write-Host "üî® Construindo a aplica√ß√£o..." -ForegroundColor Yellow
    docker-compose build --no-cache
    Write-Host "‚úÖ Build conclu√≠do!" -ForegroundColor Green
}

function Start-Application {
    Write-Host "üöÄ Iniciando a aplica√ß√£o..." -ForegroundColor Yellow
    docker-compose up -d
    
    Write-Host "‚è≥ Aguardando aplica√ß√£o ficar pronta..." -ForegroundColor Yellow
    $timeout = 120 # 2 minutos
    $elapsed = 0
    
    do {
        Start-Sleep -Seconds 5
        $elapsed += 5
        
        try {
            $response = Invoke-RestMethod -Uri "http://localhost:8080/actuator/health" -TimeoutSec 5
            if ($response.status -eq "UP") {
                Write-Host "‚úÖ Aplica√ß√£o iniciada com sucesso!" -ForegroundColor Green
                Write-Host "üåê Swagger UI: http://localhost:8080/swagger-ui.html" -ForegroundColor Cyan
                Write-Host "üíæ H2 Console: http://localhost:8080/h2-console" -ForegroundColor Cyan
                Write-Host "‚ù§Ô∏è Health Check: http://localhost:8080/actuator/health" -ForegroundColor Cyan
                return
            }
        }
        catch {
            Write-Host "." -NoNewline -ForegroundColor Yellow
        }
    } while ($elapsed -lt $timeout)
    
    Write-Host "‚ö†Ô∏è Timeout na inicializa√ß√£o. Verifique os logs." -ForegroundColor Red
}

function Stop-Application {
    Write-Host "üõë Parando a aplica√ß√£o..." -ForegroundColor Yellow
    docker-compose down
    Write-Host "‚úÖ Aplica√ß√£o parada!" -ForegroundColor Green
}

function Restart-Application {
    Stop-Application
    Start-Application
}

function Show-Logs {
    Write-Host "üìã Mostrando logs da aplica√ß√£o..." -ForegroundColor Yellow
    docker-compose logs -f --tail=100 api-simulador
}

function Clean-Resources {
    Write-Host "üßπ Limpando recursos Docker..." -ForegroundColor Yellow
    docker-compose down -v --remove-orphans
    docker system prune -f
    Write-Host "‚úÖ Limpeza conclu√≠da!" -ForegroundColor Green
}

function Show-Status {
    Write-Host "üìä Status da aplica√ß√£o:" -ForegroundColor Yellow
    docker-compose ps
    
    Write-Host "`nüîç Verificando sa√∫de..." -ForegroundColor Yellow
    try {
        $health = Invoke-RestMethod -Uri "http://localhost:8080/actuator/health" -TimeoutSec 5
        Write-Host "‚úÖ Status: $($health.status)" -ForegroundColor Green
        
        if ($health.components) {
            Write-Host "üìã Componentes:" -ForegroundColor Cyan
            $health.components.PSObject.Properties | ForEach-Object {
                $status = $_.Value.status
                $color = if ($status -eq "UP") { "Green" } else { "Red" }
                Write-Host "  - $($_.Name): $status" -ForegroundColor $color
            }
        }
    }
    catch {
        Write-Host "‚ùå Aplica√ß√£o n√£o est√° respondendo" -ForegroundColor Red
    }
}

function Test-Application {
    Write-Host "üß™ Testando endpoints da aplica√ß√£o..." -ForegroundColor Yellow
    
    $tests = @(
        @{
            Name = "Health Check"
            Url = "http://localhost:8080/actuator/health"
            ExpectedStatus = "UP"
        },
        @{
            Name = "Swagger UI"
            Url = "http://localhost:8080/swagger-ui.html"
            ExpectedStatus = "200"
        },
        @{
            Name = "EventHub Status"
            Url = "http://localhost:8080/monitoramento/eventhub-status"
            ExpectedStatus = "200"
        }
    )
    
    foreach ($test in $tests) {
        try {
            Write-Host "  Testing $($test.Name)..." -NoNewline
            $response = Invoke-WebRequest -Uri $test.Url -TimeoutSec 10
            if ($response.StatusCode -eq 200) {
                Write-Host " ‚úÖ" -ForegroundColor Green
            } else {
                Write-Host " ‚ùå ($($response.StatusCode))" -ForegroundColor Red
            }
        }
        catch {
            Write-Host " ‚ùå (Error: $($_.Exception.Message))" -ForegroundColor Red
        }
    }
}

# Main execution
Show-Header
Test-Prerequisites

switch ($Action) {
    "build" { Build-Application }
    "start" { Start-Application }
    "stop" { Stop-Application }
    "restart" { Restart-Application }
    "logs" { Show-Logs }
    "clean" { Clean-Resources }
    "status" { Show-Status }
    "test" { Test-Application }
}

Write-Host "`nüéØ Para o Hackathon, use:" -ForegroundColor Cyan
Write-Host "  ./docker-setup.ps1 build   # Construir a imagem" -ForegroundColor White
Write-Host "  ./docker-setup.ps1 start   # Iniciar aplica√ß√£o" -ForegroundColor White
Write-Host "  ./docker-setup.ps1 test    # Testar endpoints" -ForegroundColor White
Write-Host "  ./docker-setup.ps1 status  # Ver status" -ForegroundColor White

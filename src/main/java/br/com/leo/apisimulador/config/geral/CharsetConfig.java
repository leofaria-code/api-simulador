package br.com.leo.apisimulador.config.geral;

import org.springframework.lang.NonNull;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import jakarta.annotation.PostConstruct;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.List;

/**
 * Configura√ß√£o centralizada de charset/encoding para toda a aplica√ß√£o.
 * Define UTF-8 como padr√£o para suportar caracteres especiais brasileiros (√ß, √£, √µ, etc.).
 */
@Configuration
@Order(2) // Executar ap√≥s TimeZoneConfig
public class CharsetConfig implements WebMvcConfigurer {
    
    /**
     * Charset padr√£o da aplica√ß√£o configur√°vel via application.yml
     */
    @Value("${app.charset:UTF-8}")
    private String defaultCharset;
    
    /**
     * Define o charset padr√£o da JVM para toda a aplica√ß√£o.
     * Isso afeta file.encoding, console output, etc.
     */
    @PostConstruct
    public void init() {
        System.setProperty("file.encoding", defaultCharset);
        System.setProperty("sun.jnu.encoding", defaultCharset);
        
        // Log da configura√ß√£o aplicada
        System.out.println("üî§ Charset configurado: " + defaultCharset);
        System.out.println("üáßüá∑ Suporte a caracteres especiais: √ß, √£, √µ, √º, etc.");
    }
    
    /**
     * Bean para inje√ß√£o de depend√™ncia do Charset padr√£o
     */
    @Bean("defaultCharset")
    public Charset defaultCharset() {
        return Charset.forName(defaultCharset);
    }
    
    /**
     * Configura√ß√£o do Spring MVC para usar UTF-8 em todas as respostas HTTP
     */
    @Override
    public void configureMessageConverters(@NonNull List<HttpMessageConverter<?>> converters) {
        StringHttpMessageConverter stringConverter = new StringHttpMessageConverter();
        stringConverter.setDefaultCharset(getDefaultCharset());
        converters.add(0, stringConverter);
    }
    
    /**
     * Utilit√°rio para obter o Charset padr√£o estaticamente
     */
    public static Charset getDefaultCharset() {
        return StandardCharsets.UTF_8;
    }
    
    /**
     * Utilit√°rio para codificar string com charset padr√£o
     */
    public static byte[] encode(String text) {
        return text != null ? text.getBytes(getDefaultCharset()) : new byte[0];
    }
    
    /**
     * Utilit√°rio para decodificar bytes com charset padr√£o
     */
    public static String decode(byte[] bytes) {
        return bytes != null ? new String(bytes, getDefaultCharset()) : "";
    }
    
    /**
     * Utilit√°rio para garantir que uma string est√° em UTF-8
     */
    public static String ensureUtf8(String text) {
        if (text == null) return null;
        
        // Se j√° est√° em UTF-8, retorna como est√°
        if (getDefaultCharset().newEncoder().canEncode(text)) {
            return text;
        }
        
        // Tenta converter de ISO-8859-1 para UTF-8 (caso comum)
        try {
            byte[] bytes = text.getBytes(StandardCharsets.ISO_8859_1);
            return new String(bytes, getDefaultCharset());
        } catch (Exception e) {
            return text; // Retorna original se n√£o conseguir converter
        }
    }
    
    /**
     * Utilit√°rio para limpar caracteres especiais se necess√°rio
     */
    public static String sanitize(String text) {
        if (text == null) return null;
        
        // Normaliza caracteres especiais para equivalentes ASCII se necess√°rio
        return text
            .replace("√ß", "c")
            .replace("√á", "C")
            .replace("√£", "a")
            .replace("√É", "A")
            .replace("√µ", "o")
            .replace("√ï", "O")
            .replace("√º", "u")
            .replace("√ú", "U");
    }
}

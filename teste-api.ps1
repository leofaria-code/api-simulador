#!/usr/bin/env pwsh

Write-Host "=== TESTE COMPLETO DA API SIMULADOR ===" -ForegroundColor Green

# Aguardar aplica√ß√£o inicializar
Write-Host "‚è≥ Aguardando aplica√ß√£o inicializar..." -ForegroundColor Yellow
Start-Sleep -Seconds 15

Write-Host "`nüîç TESTE 1: Health Check" -ForegroundColor Cyan
try {
    $health = Invoke-RestMethod -Uri "http://localhost:8080/actuator/health" -Method GET
    Write-Host "‚úÖ Health Check: $($health.status)" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Health Check falhou: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüí∞ TESTE 2: Criando Simula√ß√£o" -ForegroundColor Cyan
$headers = @{"Content-Type" = "application/json" }
$simulacao1 = @{
    produtoId      = 1
    valorDesejado  = 50000.00
    prazo          = 60
    dataReferencia = "2025-08-24"
} | ConvertTo-Json

try {
    $response1 = Invoke-RestMethod -Uri "http://localhost:8080/api/simulacao" -Method POST -Body $simulacao1 -Headers $headers
    Write-Host "‚úÖ Simula√ß√£o criada com ID: $($response1.idSimulacao)" -ForegroundColor Green
    Write-Host "üìä Resultado: $($response1.resultadoJson)" -ForegroundColor Gray
}
catch {
    Write-Host "‚ùå Cria√ß√£o de simula√ß√£o falhou: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüí∞ TESTE 3: Criando Segunda Simula√ß√£o" -ForegroundColor Cyan
$simulacao2 = @{
    produtoId      = 2
    valorDesejado  = 100000.00
    prazo          = 120
    dataReferencia = "2025-08-24"
} | ConvertTo-Json

try {
    $response2 = Invoke-RestMethod -Uri "http://localhost:8080/api/simulacao" -Method POST -Body $simulacao2 -Headers $headers
    Write-Host "‚úÖ Segunda simula√ß√£o criada com ID: $($response2.idSimulacao)" -ForegroundColor Green
    Write-Host "üìä Resultado: $($response2.resultadoJson)" -ForegroundColor Gray
}
catch {
    Write-Host "‚ùå Segunda simula√ß√£o falhou: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüìã TESTE 4: Listando Todas as Simula√ß√µes" -ForegroundColor Cyan
try {
    $simulacoes = Invoke-RestMethod -Uri "http://localhost:8080/api/simulacao" -Method GET
    Write-Host "‚úÖ Total de simula√ß√µes: $($simulacoes.Count)" -ForegroundColor Green
    foreach ($sim in $simulacoes) {
        Write-Host "   üìù ID: $($sim.idSimulacao) | Produto: $($sim.produtoId) | Valor: R$ $($sim.valorDesejado)" -ForegroundColor Gray
    }
}
catch {
    Write-Host "‚ùå Listagem falhou: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n‚ùå TESTE 5: Teste de Valida√ß√£o (dados inv√°lidos)" -ForegroundColor Cyan
$simulacaoInvalida = @{
    produtoId      = -1
    valorDesejado  = -1000
    prazo          = 0
    dataReferencia = "data-invalida"
} | ConvertTo-Json

try {
    $responseInvalida = Invoke-RestMethod -Uri "http://localhost:8080/api/simulacao" -Method POST -Body $simulacaoInvalida -Headers $headers
    Write-Host "‚ùå Valida√ß√£o n√£o funcionou - deveria ter falhado!" -ForegroundColor Red
}
catch {
    Write-Host "‚úÖ Valida√ß√£o funcionou corretamente: $($_.Exception.Message)" -ForegroundColor Green
}

Write-Host "`nüìä TESTE 6: Testando Endpoints do Actuator" -ForegroundColor Cyan
try {
    $info = Invoke-RestMethod -Uri "http://localhost:8080/actuator/info" -Method GET
    Write-Host "‚úÖ Actuator Info dispon√≠vel" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Actuator Info falhou: $($_.Exception.Message)" -ForegroundColor Red
}

try {
    $metrics = Invoke-RestMethod -Uri "http://localhost:8080/actuator/metrics" -Method GET
    Write-Host "‚úÖ Actuator Metrics dispon√≠vel ($($metrics.names.Count) m√©tricas)" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Actuator Metrics falhou: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüéâ TESTE COMPLETO FINALIZADO!" -ForegroundColor Green
Write-Host "üìù Console H2 dispon√≠vel em: http://localhost:8080/h2-console" -ForegroundColor Yellow
Write-Host "üìä Actuator dispon√≠vel em: http://localhost:8080/actuator" -ForegroundColor Yellow
